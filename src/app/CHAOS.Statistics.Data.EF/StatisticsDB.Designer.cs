//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace CHAOS.Statistics.Data.EF
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class statisticsEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new statisticsEntities object using the connection string found in the 'statisticsEntities' section of the application configuration file.
        /// </summary>
        public statisticsEntities() : base("name=statisticsEntities", "statisticsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new statisticsEntities object.
        /// </summary>
        public statisticsEntities(string connectionString) : base(connectionString, "statisticsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new statisticsEntities object.
        /// </summary>
        public statisticsEntities(EntityConnection connection) : base(connection, "statisticsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<daystats_getinfo> daystats_getinfo
        {
            get
            {
                if ((_daystats_getinfo == null))
                {
                    _daystats_getinfo = base.CreateObjectSet<daystats_getinfo>("daystats_getinfo");
                }
                return _daystats_getinfo;
            }
        }
        private ObjectSet<daystats_getinfo> _daystats_getinfo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<hourstats_entity> hourstats_entity
        {
            get
            {
                if ((_hourstats_entity == null))
                {
                    _hourstats_entity = base.CreateObjectSet<hourstats_entity>("hourstats_entity");
                }
                return _hourstats_entity;
            }
        }
        private ObjectSet<hourstats_entity> _hourstats_entity;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<daystats_getobject_entity> daystats_getobject_entity
        {
            get
            {
                if ((_daystats_getobject_entity == null))
                {
                    _daystats_getobject_entity = base.CreateObjectSet<daystats_getobject_entity>("daystats_getobject_entity");
                }
                return _daystats_getobject_entity;
            }
        }
        private ObjectSet<daystats_getobject_entity> _daystats_getobject_entity;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<daystats_gettotal_entity> daystats_gettotal_entity
        {
            get
            {
                if ((_daystats_gettotal_entity == null))
                {
                    _daystats_gettotal_entity = base.CreateObjectSet<daystats_gettotal_entity>("daystats_gettotal_entity");
                }
                return _daystats_gettotal_entity;
            }
        }
        private ObjectSet<daystats_gettotal_entity> _daystats_gettotal_entity;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<daystatsgeo_entity> daystatsgeo_entity
        {
            get
            {
                if ((_daystatsgeo_entity == null))
                {
                    _daystatsgeo_entity = base.CreateObjectSet<daystatsgeo_entity>("daystatsgeo_entity");
                }
                return _daystatsgeo_entity;
            }
        }
        private ObjectSet<daystatsgeo_entity> _daystatsgeo_entity;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<durationsession_entity> durationsession_entity
        {
            get
            {
                if ((_durationsession_entity == null))
                {
                    _durationsession_entity = base.CreateObjectSet<durationsession_entity>("durationsession_entity");
                }
                return _durationsession_entity;
            }
        }
        private ObjectSet<durationsession_entity> _durationsession_entity;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<hourstats_getobjects_entity> hourstats_getobjects_entity
        {
            get
            {
                if ((_hourstats_getobjects_entity == null))
                {
                    _hourstats_getobjects_entity = base.CreateObjectSet<hourstats_getobjects_entity>("hourstats_getobjects_entity");
                }
                return _hourstats_getobjects_entity;
            }
        }
        private ObjectSet<hourstats_getobjects_entity> _hourstats_getobjects_entity;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the daystats_getinfo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodaystats_getinfo(daystats_getinfo daystats_getinfo)
        {
            base.AddObject("daystats_getinfo", daystats_getinfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the hourstats_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTohourstats_entity(hourstats_entity hourstats_entity)
        {
            base.AddObject("hourstats_entity", hourstats_entity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the daystats_getobject_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodaystats_getobject_entity(daystats_getobject_entity daystats_getobject_entity)
        {
            base.AddObject("daystats_getobject_entity", daystats_getobject_entity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the daystats_gettotal_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodaystats_gettotal_entity(daystats_gettotal_entity daystats_gettotal_entity)
        {
            base.AddObject("daystats_gettotal_entity", daystats_gettotal_entity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the daystatsgeo_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodaystatsgeo_entity(daystatsgeo_entity daystatsgeo_entity)
        {
            base.AddObject("daystatsgeo_entity", daystatsgeo_entity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the durationsession_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodurationsession_entity(durationsession_entity durationsession_entity)
        {
            base.AddObject("durationsession_entity", durationsession_entity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the hourstats_getobjects_entity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTohourstats_getobjects_entity(hourstats_getobjects_entity hourstats_getobjects_entity)
        {
            base.AddObject("hourstats_getobjects_entity", hourstats_getobjects_entity);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<daystats_gettotal_entity> DayStats_GetTotal(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<daystats_gettotal_entity>("DayStats_GetTotal", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<daystats_gettotal_entity> DayStats_GetTotal(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<daystats_gettotal_entity>("DayStats_GetTotal", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<daystats_getinfo> DayStats_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<daystats_getinfo>("DayStats_Get", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<daystats_getinfo> DayStats_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<daystats_getinfo>("DayStats_Get", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        public ObjectResult<daystats_getobject_entity> DayStats_GetObjects(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<daystats_getobject_entity>("DayStats_GetObjects", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        public ObjectResult<daystats_getobject_entity> DayStats_GetObjects(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<daystats_getobject_entity>("DayStats_GetObjects", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="repositoryIdentifier">No Metadata Documentation available.</param>
        /// <param name="objectIdentifier">No Metadata Documentation available.</param>
        /// <param name="objectTypeID">No Metadata Documentation available.</param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIdentifier">No Metadata Documentation available.</param>
        /// <param name="channelTypeID">No Metadata Documentation available.</param>
        /// <param name="eventTypeID">No Metadata Documentation available.</param>
        /// <param name="objectTitle">No Metadata Documentation available.</param>
        /// <param name="iP">No Metadata Documentation available.</param>
        /// <param name="city">No Metadata Documentation available.</param>
        /// <param name="country">No Metadata Documentation available.</param>
        /// <param name="userSessionID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> StatsObject_Set(global::System.String repositoryIdentifier, global::System.String objectIdentifier, Nullable<global::System.Int32> objectTypeID, Nullable<global::System.Int32> objectCollectionID, global::System.String channelIdentifier, Nullable<global::System.Int32> channelTypeID, Nullable<global::System.Int32> eventTypeID, global::System.String objectTitle, global::System.String iP, global::System.String city, global::System.String country, Nullable<global::System.Int32> userSessionID)
        {
            ObjectParameter repositoryIdentifierParameter;
            if (repositoryIdentifier != null)
            {
                repositoryIdentifierParameter = new ObjectParameter("RepositoryIdentifier", repositoryIdentifier);
            }
            else
            {
                repositoryIdentifierParameter = new ObjectParameter("RepositoryIdentifier", typeof(global::System.String));
            }
    
            ObjectParameter objectIdentifierParameter;
            if (objectIdentifier != null)
            {
                objectIdentifierParameter = new ObjectParameter("ObjectIdentifier", objectIdentifier);
            }
            else
            {
                objectIdentifierParameter = new ObjectParameter("ObjectIdentifier", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDParameter;
            if (objectTypeID.HasValue)
            {
                objectTypeIDParameter = new ObjectParameter("ObjectTypeID", objectTypeID);
            }
            else
            {
                objectTypeIDParameter = new ObjectParameter("ObjectTypeID", typeof(global::System.Int32));
            }
    
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("ObjectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("ObjectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIdentifierParameter;
            if (channelIdentifier != null)
            {
                channelIdentifierParameter = new ObjectParameter("ChannelIdentifier", channelIdentifier);
            }
            else
            {
                channelIdentifierParameter = new ObjectParameter("ChannelIdentifier", typeof(global::System.String));
            }
    
            ObjectParameter channelTypeIDParameter;
            if (channelTypeID.HasValue)
            {
                channelTypeIDParameter = new ObjectParameter("ChannelTypeID", channelTypeID);
            }
            else
            {
                channelTypeIDParameter = new ObjectParameter("ChannelTypeID", typeof(global::System.Int32));
            }
    
            ObjectParameter eventTypeIDParameter;
            if (eventTypeID.HasValue)
            {
                eventTypeIDParameter = new ObjectParameter("EventTypeID", eventTypeID);
            }
            else
            {
                eventTypeIDParameter = new ObjectParameter("EventTypeID", typeof(global::System.Int32));
            }
    
            ObjectParameter objectTitleParameter;
            if (objectTitle != null)
            {
                objectTitleParameter = new ObjectParameter("ObjectTitle", objectTitle);
            }
            else
            {
                objectTitleParameter = new ObjectParameter("ObjectTitle", typeof(global::System.String));
            }
    
            ObjectParameter iPParameter;
            if (iP != null)
            {
                iPParameter = new ObjectParameter("IP", iP);
            }
            else
            {
                iPParameter = new ObjectParameter("IP", typeof(global::System.String));
            }
    
            ObjectParameter cityParameter;
            if (city != null)
            {
                cityParameter = new ObjectParameter("City", city);
            }
            else
            {
                cityParameter = new ObjectParameter("City", typeof(global::System.String));
            }
    
            ObjectParameter countryParameter;
            if (country != null)
            {
                countryParameter = new ObjectParameter("Country", country);
            }
            else
            {
                countryParameter = new ObjectParameter("Country", typeof(global::System.String));
            }
    
            ObjectParameter userSessionIDParameter;
            if (userSessionID.HasValue)
            {
                userSessionIDParameter = new ObjectParameter("UserSessionID", userSessionID);
            }
            else
            {
                userSessionIDParameter = new ObjectParameter("UserSessionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("StatsObject_Set", repositoryIdentifierParameter, objectIdentifierParameter, objectTypeIDParameter, objectCollectionIDParameter, channelIdentifierParameter, channelTypeIDParameter, eventTypeIDParameter, objectTitleParameter, iPParameter, cityParameter, countryParameter, userSessionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<hourstats_entity> HourStats_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<hourstats_entity>("HourStats_Get", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<hourstats_entity> HourStats_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<hourstats_entity>("HourStats_Get", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectSessionID">No Metadata Documentation available.</param>
        /// <param name="startValue">No Metadata Documentation available.</param>
        /// <param name="endValue">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> DurationSession_Set(Nullable<global::System.Int32> objectSessionID, Nullable<global::System.Int64> startValue, Nullable<global::System.Int64> endValue)
        {
            ObjectParameter objectSessionIDParameter;
            if (objectSessionID.HasValue)
            {
                objectSessionIDParameter = new ObjectParameter("objectSessionID", objectSessionID);
            }
            else
            {
                objectSessionIDParameter = new ObjectParameter("objectSessionID", typeof(global::System.Int32));
            }
    
            ObjectParameter startValueParameter;
            if (startValue.HasValue)
            {
                startValueParameter = new ObjectParameter("startValue", startValue);
            }
            else
            {
                startValueParameter = new ObjectParameter("startValue", typeof(global::System.Int64));
            }
    
            ObjectParameter endValueParameter;
            if (endValue.HasValue)
            {
                endValueParameter = new ObjectParameter("endValue", endValue);
            }
            else
            {
                endValueParameter = new ObjectParameter("endValue", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("DurationSession_Set", objectSessionIDParameter, startValueParameter, endValueParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        /// <param name="geoType">No Metadata Documentation available.</param>
        public ObjectResult<daystatsgeo_entity> DayStatsGeo_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection, global::System.String geoType)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            ObjectParameter geoTypeParameter;
            if (geoType != null)
            {
                geoTypeParameter = new ObjectParameter("geoType", geoType);
            }
            else
            {
                geoTypeParameter = new ObjectParameter("geoType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<daystatsgeo_entity>("DayStatsGeo_Get", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter, geoTypeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        /// <param name="geoType">No Metadata Documentation available.</param>
        public ObjectResult<daystatsgeo_entity> DayStatsGeo_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection, global::System.String geoType, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            ObjectParameter geoTypeParameter;
            if (geoType != null)
            {
                geoTypeParameter = new ObjectParameter("geoType", geoType);
            }
            else
            {
                geoTypeParameter = new ObjectParameter("geoType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<daystatsgeo_entity>("DayStatsGeo_Get", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter, geoTypeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        public ObjectResult<hourstats_getobjects_entity> HourStats_GetObjects(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<hourstats_getobjects_entity>("HourStats_GetObjects", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="pageIndex">No Metadata Documentation available.</param>
        /// <param name="pageSize">No Metadata Documentation available.</param>
        /// <param name="sortDirection">No Metadata Documentation available.</param>
        public ObjectResult<hourstats_getobjects_entity> HourStats_GetObjects(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Int32> pageIndex, Nullable<global::System.Int32> pageSize, global::System.String sortDirection, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter pageIndexParameter;
            if (pageIndex.HasValue)
            {
                pageIndexParameter = new ObjectParameter("pageIndex", pageIndex);
            }
            else
            {
                pageIndexParameter = new ObjectParameter("pageIndex", typeof(global::System.Int32));
            }
    
            ObjectParameter pageSizeParameter;
            if (pageSize.HasValue)
            {
                pageSizeParameter = new ObjectParameter("pageSize", pageSize);
            }
            else
            {
                pageSizeParameter = new ObjectParameter("pageSize", typeof(global::System.Int32));
            }
    
            ObjectParameter sortDirectionParameter;
            if (sortDirection != null)
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", sortDirection);
            }
            else
            {
                sortDirectionParameter = new ObjectParameter("sortDirection", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<hourstats_getobjects_entity>("HourStats_GetObjects", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, fromDateParameter, toDateParameter, pageIndexParameter, pageSizeParameter, sortDirectionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<durationsession_entity> DurationSession_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<durationsession_entity>("DurationSession_Get", objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectCollectionID">No Metadata Documentation available.</param>
        /// <param name="channelIDList">No Metadata Documentation available.</param>
        /// <param name="objectTypeIDList">No Metadata Documentation available.</param>
        /// <param name="eventTypeIDList">No Metadata Documentation available.</param>
        /// <param name="statsObjectIdentifierList">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        public ObjectResult<durationsession_entity> DurationSession_Get(Nullable<global::System.Int32> objectCollectionID, global::System.String channelIDList, global::System.String objectTypeIDList, global::System.String eventTypeIDList, global::System.String statsObjectIdentifierList, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, MergeOption mergeOption)
        {
            ObjectParameter objectCollectionIDParameter;
            if (objectCollectionID.HasValue)
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", objectCollectionID);
            }
            else
            {
                objectCollectionIDParameter = new ObjectParameter("objectCollectionID", typeof(global::System.Int32));
            }
    
            ObjectParameter channelIDListParameter;
            if (channelIDList != null)
            {
                channelIDListParameter = new ObjectParameter("channelIDList", channelIDList);
            }
            else
            {
                channelIDListParameter = new ObjectParameter("channelIDList", typeof(global::System.String));
            }
    
            ObjectParameter objectTypeIDListParameter;
            if (objectTypeIDList != null)
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", objectTypeIDList);
            }
            else
            {
                objectTypeIDListParameter = new ObjectParameter("objectTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeIDListParameter;
            if (eventTypeIDList != null)
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", eventTypeIDList);
            }
            else
            {
                eventTypeIDListParameter = new ObjectParameter("eventTypeIDList", typeof(global::System.String));
            }
    
            ObjectParameter statsObjectIdentifierListParameter;
            if (statsObjectIdentifierList != null)
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", statsObjectIdentifierList);
            }
            else
            {
                statsObjectIdentifierListParameter = new ObjectParameter("statsObjectIdentifierList", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<durationsession_entity>("DurationSession_Get", mergeOption, objectCollectionIDParameter, channelIDListParameter, objectTypeIDListParameter, eventTypeIDListParameter, statsObjectIdentifierListParameter, fromDateParameter, toDateParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="daystats_getinfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class daystats_getinfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new daystats_getinfo object.
        /// </summary>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        public static daystats_getinfo Createdaystats_getinfo(global::System.DateTime timestamp)
        {
            daystats_getinfo daystats_getinfo = new daystats_getinfo();
            daystats_getinfo.Timestamp = timestamp;
            return daystats_getinfo;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> NumberOfViews
        {
            get
            {
                return _NumberOfViews;
            }
            set
            {
                OnNumberOfViewsChanging(value);
                ReportPropertyChanging("NumberOfViews");
                _NumberOfViews = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberOfViews");
                OnNumberOfViewsChanged();
            }
        }
        private Nullable<global::System.Decimal> _NumberOfViews;
        partial void OnNumberOfViewsChanging(Nullable<global::System.Decimal> value);
        partial void OnNumberOfViewsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                if (_Timestamp != value)
                {
                    OnTimestampChanging(value);
                    ReportPropertyChanging("Timestamp");
                    _Timestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="daystats_getobject_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class daystats_getobject_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new daystats_getobject_entity object.
        /// </summary>
        /// <param name="statsObjectID">Initial value of the StatsObjectID property.</param>
        /// <param name="identifier">Initial value of the Identifier property.</param>
        /// <param name="objectTypeID">Initial value of the ObjectTypeID property.</param>
        public static daystats_getobject_entity Createdaystats_getobject_entity(global::System.Int32 statsObjectID, global::System.String identifier, global::System.Int32 objectTypeID)
        {
            daystats_getobject_entity daystats_getobject_entity = new daystats_getobject_entity();
            daystats_getobject_entity.StatsObjectID = statsObjectID;
            daystats_getobject_entity.Identifier = identifier;
            daystats_getobject_entity.ObjectTypeID = objectTypeID;
            return daystats_getobject_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> NumberOfViews
        {
            get
            {
                return _NumberOfViews;
            }
            set
            {
                OnNumberOfViewsChanging(value);
                ReportPropertyChanging("NumberOfViews");
                _NumberOfViews = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberOfViews");
                OnNumberOfViewsChanged();
            }
        }
        private Nullable<global::System.Decimal> _NumberOfViews;
        partial void OnNumberOfViewsChanging(Nullable<global::System.Decimal> value);
        partial void OnNumberOfViewsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatsObjectID
        {
            get
            {
                return _StatsObjectID;
            }
            set
            {
                if (_StatsObjectID != value)
                {
                    OnStatsObjectIDChanging(value);
                    ReportPropertyChanging("StatsObjectID");
                    _StatsObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StatsObjectID");
                    OnStatsObjectIDChanged();
                }
            }
        }
        private global::System.Int32 _StatsObjectID;
        partial void OnStatsObjectIDChanging(global::System.Int32 value);
        partial void OnStatsObjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                if (_Identifier != value)
                {
                    OnIdentifierChanging(value);
                    ReportPropertyChanging("Identifier");
                    _Identifier = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Identifier");
                    OnIdentifierChanged();
                }
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ObjectTypeID
        {
            get
            {
                return _ObjectTypeID;
            }
            set
            {
                if (_ObjectTypeID != value)
                {
                    OnObjectTypeIDChanging(value);
                    ReportPropertyChanging("ObjectTypeID");
                    _ObjectTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectTypeID");
                    OnObjectTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ObjectTypeID;
        partial void OnObjectTypeIDChanging(global::System.Int32 value);
        partial void OnObjectTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ObjectTitle
        {
            get
            {
                return _ObjectTitle;
            }
            set
            {
                OnObjectTitleChanging(value);
                ReportPropertyChanging("ObjectTitle");
                _ObjectTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ObjectTitle");
                OnObjectTitleChanged();
            }
        }
        private global::System.String _ObjectTitle;
        partial void OnObjectTitleChanging(global::System.String value);
        partial void OnObjectTitleChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="daystats_gettotal_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class daystats_gettotal_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new daystats_gettotal_entity object.
        /// </summary>
        /// <param name="numberOfViews">Initial value of the NumberOfViews property.</param>
        public static daystats_gettotal_entity Createdaystats_gettotal_entity(global::System.Int32 numberOfViews)
        {
            daystats_gettotal_entity daystats_gettotal_entity = new daystats_gettotal_entity();
            daystats_gettotal_entity.NumberOfViews = numberOfViews;
            return daystats_gettotal_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NumberOfViews
        {
            get
            {
                return _NumberOfViews;
            }
            set
            {
                if (_NumberOfViews != value)
                {
                    OnNumberOfViewsChanging(value);
                    ReportPropertyChanging("NumberOfViews");
                    _NumberOfViews = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NumberOfViews");
                    OnNumberOfViewsChanged();
                }
            }
        }
        private global::System.Int32 _NumberOfViews;
        partial void OnNumberOfViewsChanging(global::System.Int32 value);
        partial void OnNumberOfViewsChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="daystatsgeo_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class daystatsgeo_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new daystatsgeo_entity object.
        /// </summary>
        /// <param name="numberOfViews">Initial value of the NumberOfViews property.</param>
        /// <param name="geoString">Initial value of the GeoString property.</param>
        public static daystatsgeo_entity Createdaystatsgeo_entity(global::System.Int32 numberOfViews, global::System.String geoString)
        {
            daystatsgeo_entity daystatsgeo_entity = new daystatsgeo_entity();
            daystatsgeo_entity.NumberOfViews = numberOfViews;
            daystatsgeo_entity.GeoString = geoString;
            return daystatsgeo_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NumberOfViews
        {
            get
            {
                return _NumberOfViews;
            }
            set
            {
                if (_NumberOfViews != value)
                {
                    OnNumberOfViewsChanging(value);
                    ReportPropertyChanging("NumberOfViews");
                    _NumberOfViews = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NumberOfViews");
                    OnNumberOfViewsChanged();
                }
            }
        }
        private global::System.Int32 _NumberOfViews;
        partial void OnNumberOfViewsChanging(global::System.Int32 value);
        partial void OnNumberOfViewsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GeoString
        {
            get
            {
                return _GeoString;
            }
            set
            {
                if (_GeoString != value)
                {
                    OnGeoStringChanging(value);
                    ReportPropertyChanging("GeoString");
                    _GeoString = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("GeoString");
                    OnGeoStringChanged();
                }
            }
        }
        private global::System.String _GeoString;
        partial void OnGeoStringChanging(global::System.String value);
        partial void OnGeoStringChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="durationsession_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class durationsession_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new durationsession_entity object.
        /// </summary>
        /// <param name="duration">Initial value of the Duration property.</param>
        public static durationsession_entity Createdurationsession_entity(global::System.Int32 duration)
        {
            durationsession_entity durationsession_entity = new durationsession_entity();
            durationsession_entity.Duration = duration;
            return durationsession_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                if (_Duration != value)
                {
                    OnDurationChanging(value);
                    ReportPropertyChanging("Duration");
                    _Duration = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Duration");
                    OnDurationChanged();
                }
            }
        }
        private global::System.Int32 _Duration;
        partial void OnDurationChanging(global::System.Int32 value);
        partial void OnDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ObjectSessionDate
        {
            get
            {
                return _ObjectSessionDate;
            }
            set
            {
                OnObjectSessionDateChanging(value);
                ReportPropertyChanging("ObjectSessionDate");
                _ObjectSessionDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ObjectSessionDate");
                OnObjectSessionDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ObjectSessionDate;
        partial void OnObjectSessionDateChanging(Nullable<global::System.DateTime> value);
        partial void OnObjectSessionDateChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="hourstats_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class hourstats_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new hourstats_entity object.
        /// </summary>
        /// <param name="hour">Initial value of the Hour property.</param>
        /// <param name="count">Initial value of the Count property.</param>
        public static hourstats_entity Createhourstats_entity(global::System.Int32 hour, global::System.Int32 count)
        {
            hourstats_entity hourstats_entity = new hourstats_entity();
            hourstats_entity.Hour = hour;
            hourstats_entity.Count = count;
            return hourstats_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Hour
        {
            get
            {
                return _Hour;
            }
            set
            {
                if (_Hour != value)
                {
                    OnHourChanging(value);
                    ReportPropertyChanging("Hour");
                    _Hour = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Hour");
                    OnHourChanged();
                }
            }
        }
        private global::System.Int32 _Hour;
        partial void OnHourChanging(global::System.Int32 value);
        partial void OnHourChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Count
        {
            get
            {
                return _Count;
            }
            set
            {
                if (_Count != value)
                {
                    OnCountChanging(value);
                    ReportPropertyChanging("Count");
                    _Count = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Count");
                    OnCountChanged();
                }
            }
        }
        private global::System.Int32 _Count;
        partial void OnCountChanging(global::System.Int32 value);
        partial void OnCountChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="statisticsModel", Name="hourstats_getobjects_entity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class hourstats_getobjects_entity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new hourstats_getobjects_entity object.
        /// </summary>
        /// <param name="statsObjectID">Initial value of the StatsObjectID property.</param>
        /// <param name="identifier">Initial value of the Identifier property.</param>
        /// <param name="objectTypeID">Initial value of the ObjectTypeID property.</param>
        public static hourstats_getobjects_entity Createhourstats_getobjects_entity(global::System.Int32 statsObjectID, global::System.String identifier, global::System.Int32 objectTypeID)
        {
            hourstats_getobjects_entity hourstats_getobjects_entity = new hourstats_getobjects_entity();
            hourstats_getobjects_entity.StatsObjectID = statsObjectID;
            hourstats_getobjects_entity.Identifier = identifier;
            hourstats_getobjects_entity.ObjectTypeID = objectTypeID;
            return hourstats_getobjects_entity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> NumberOfViews
        {
            get
            {
                return _NumberOfViews;
            }
            set
            {
                OnNumberOfViewsChanging(value);
                ReportPropertyChanging("NumberOfViews");
                _NumberOfViews = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberOfViews");
                OnNumberOfViewsChanged();
            }
        }
        private Nullable<global::System.Decimal> _NumberOfViews;
        partial void OnNumberOfViewsChanging(Nullable<global::System.Decimal> value);
        partial void OnNumberOfViewsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatsObjectID
        {
            get
            {
                return _StatsObjectID;
            }
            set
            {
                if (_StatsObjectID != value)
                {
                    OnStatsObjectIDChanging(value);
                    ReportPropertyChanging("StatsObjectID");
                    _StatsObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StatsObjectID");
                    OnStatsObjectIDChanged();
                }
            }
        }
        private global::System.Int32 _StatsObjectID;
        partial void OnStatsObjectIDChanging(global::System.Int32 value);
        partial void OnStatsObjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Identifier
        {
            get
            {
                return _Identifier;
            }
            set
            {
                if (_Identifier != value)
                {
                    OnIdentifierChanging(value);
                    ReportPropertyChanging("Identifier");
                    _Identifier = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Identifier");
                    OnIdentifierChanged();
                }
            }
        }
        private global::System.String _Identifier;
        partial void OnIdentifierChanging(global::System.String value);
        partial void OnIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ObjectTypeID
        {
            get
            {
                return _ObjectTypeID;
            }
            set
            {
                if (_ObjectTypeID != value)
                {
                    OnObjectTypeIDChanging(value);
                    ReportPropertyChanging("ObjectTypeID");
                    _ObjectTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectTypeID");
                    OnObjectTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ObjectTypeID;
        partial void OnObjectTypeIDChanging(global::System.Int32 value);
        partial void OnObjectTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ObjectTitle
        {
            get
            {
                return _ObjectTitle;
            }
            set
            {
                OnObjectTitleChanging(value);
                ReportPropertyChanging("ObjectTitle");
                _ObjectTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ObjectTitle");
                OnObjectTitleChanged();
            }
        }
        private global::System.String _ObjectTitle;
        partial void OnObjectTitleChanging(global::System.String value);
        partial void OnObjectTitleChanged();

        #endregion
    
    }

    #endregion
    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="statisticsModel", Name="DayStats_Get_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class DayStats_Get_Result : ComplexObject
    {
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="statisticsModel", Name="DayStats_Get_Result1")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class DayStats_Get_Result1 : ComplexObject
    {
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="statisticsModel", Name="DayStats_GetObjects_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class DayStats_GetObjects_Result : ComplexObject
    {
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="statisticsModel", Name="DayStats_GetTotal_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class DayStats_GetTotal_Result : ComplexObject
    {
    }

    #endregion
    
}
